IR after inference:
module {
  func.func @"b-2(100)"(%arg0: si64) -> si64 {
    %0 = "daphne.constant"() {value = 5000 : si64} : () -> si64
    "daphne.return"(%0) : (si64) -> ()
  }
  func.func @main() {
    %0 = "daphne.constant"() {value = false} : () -> i1
    %1 = "daphne.constant"() {value = true} : () -> i1
    %2 = "daphne.constant"() {value = 100 : si64} : () -> si64
    %3 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%3, %1, %0) : (si64, i1, i1) -> ()
    %4 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%4, %1, %0) : (si64, i1, i1) -> ()
    %5 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%5, %1, %0) : (si64, i1, i1) -> ()
    %6 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%6, %1, %0) : (si64, i1, i1) -> ()
    %7 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%7, %1, %0) : (si64, i1, i1) -> ()
    %8 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%8, %1, %0) : (si64, i1, i1) -> ()
    %9 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%9, %1, %0) : (si64, i1, i1) -> ()
    %10 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%10, %1, %0) : (si64, i1, i1) -> ()
    %11 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%11, %1, %0) : (si64, i1, i1) -> ()
    %12 = "daphne.generic_call"(%2) {callee = "b-2(100)"} : (si64) -> si64
    "daphne.print"(%12, %1, %0) : (si64, i1, i1) -> ()
    "daphne.return"() : () -> ()
  }
}
5000
5000
5000
5000
5000
5000
5000
5000
5000
5000
{"startup_seconds": 0.0268904, "parsing_seconds": 0.00557095, "compilation_seconds": 0.0929969, "execution_seconds": 0.0275287, "total_seconds": 0.152987}
